{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/GoFundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror GoFundMe__NotOwner();\n\ncontract GoFundMe {\n    \n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\n    address private immutable owner;\n    address[] private funders;\n    mapping(address => uint256) private fundsByAddress;\n    AggregatorV3Interface private priceFeed;\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert GoFundMe__NotOwner();\n        _;\n    }\n\n    constructor(address pricedFeedAddress) {\n        priceFeed = AggregatorV3Interface(pricedFeedAddress);\n        owner = msg.sender;\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"You need to spend more ETH!\"\n        );\n        fundsByAddress[msg.sender] += msg.value;\n        funders.push(msg.sender);\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            fundsByAddress[funder] = 0;\n        }\n        funders = new address[](0);\n\n        (bool success, ) = owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    function cheaperWithdraw() public onlyOwner {\n        address[] memory currentFunders = funders;\n\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < currentFunders.length;\n            funderIndex++\n        ) {\n            address funder = currentFunders[funderIndex];\n            fundsByAddress[funder] = 0;\n        }\n        funders = new address[](0);\n\n        (bool success, ) = owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    function getAddressToAmountFunded(address fundingAddress)\n        public\n        view\n        returns (uint256)\n    {\n        return fundsByAddress[fundingAddress];\n    }\n\n    function getVersion() public view returns (uint256) {\n        return priceFeed.version();\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return funders[index];\n    }\n\n    function getOwner() public view returns (address) {\n        return owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return priceFeed;\n    }\n    \n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  \n  function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\n    return uint256(answer * 10000000000);\n  }\n\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n\n    return ethAmountInUsd;\n  }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}